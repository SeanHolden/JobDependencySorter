Attempt at an algorithm...

a=>
b=>e
c=>f
d=>a
e=>c
f=>

a b c d e f
# is e before b? no... so place e before b
a e b c d f
# is f before c? no.. so place f before c
a e b f c d
# is a before d? yes
# is c before e? no... so place c before e
a c e b f d
# (loop again)
# is e before b? yes
# is f before c? no... so place f before c
a f c e b d
# is a before d? yes
# is c before e? yes
# (loop again)
# is e before b? yes
# is f before c? yes
# is a before d? yes
# is c before e? yes
# complete!


#####################################################################


Plan to find circular dependency...

Theory: when counter is 3, circular dependency is found

ITEM1=(b => c)
ITEM2=(c => f)
ITEM3=(d => a)
ITEM4=(f => b)

ITEM1
check each item to see if c appears on the left....it does, so counter = 1 and now checking (c=>f)
check each item to see if f appears on the left....it does, so counter = 2 and now checking (f=>b)
check each item to see if b appears on the left....it does, so counter = 3 and circular dependency found


####

ITEM1=(b => c)
ITEM2=(c => f)
ITEM3=(d => a)
ITEM4=(e => b)

ITEM1
check each item to see if c appears on the left... it does, so counter = 1 and now checking (c=>f)
check each item to see if f appears on the left....it doesn't, so end loop for this item

ITEM2
check each item to see if f appears on the left....it doesn't, so end loop for this item

ITEM3
check each item to see if a appears on the left....it doesn't, so end loop for this item

ITEM4
check each item to see if b appears on the left... it does, so counter = 1 and now checking (b=>c)
check each item to see if c appears on the left... it does, so counter = 2 and now checking (c=>f)
check each item to see if f appears on the left....it doesn't, so end loop for this item

END


